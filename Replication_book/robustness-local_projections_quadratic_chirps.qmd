# Quadratic Terms {#sec-lp-quadratic}

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
colorize <- function(x, color) {
  if (knitr::is_latex_output()) {
    if (grep(x = color, "^#")) {
      color <- deparse(substitute(color))
    }
    sprintf("\\textcolor{%s}{%s}", color, x)
  } else if (knitr::is_html_output()) {
    sprintf("<span style='color: %s;'>%s</span>", color,
            x)
  } else x
}

wongBlack     <- "#000000"
wongGold      <- "#E69F00"
wongLightBlue <- "#56B4E9"
wongGreen     <- "#009E73"
wongYellow    <- "#F0E442"
wongBlue      <- "#0072B2"
wongOrange    <- "#D55E00"
wongPurple    <- "#CC79A7"


rouge <- "#D81B60"
bleu <- "#1E88E5"
jaune <- "#FFC107"
vert <- "#004D40"
highlight <- wongGold
```

$$
\definecolor{bayesred}{RGB}{147, 30, 24}
\definecolor{bayesblue}{RGB}{32, 35, 91}
\definecolor{bayesorange}{RGB}{218, 120, 1}
\definecolor{grey}{RGB}{128, 128, 128}
\definecolor{couleur1}{RGB}{0,163,137}
\definecolor{couleur2}{RGB}{255,124,0}
\definecolor{couleur3}{RGB}{0, 110, 158}
\definecolor{coul1}{RGB}{255,37,0}
\definecolor{coul2}{RGB}{242,173,0}
\definecolor{col_neg}{RGB}{155, 191, 221}
\definecolor{col_pos}{RGB}{255, 128, 106}
\definecolor{wongBlack}{RGB}{0,0,0}
\definecolor{wongLightBlue}{RGB}{86, 180, 233}
\definecolor{wongGold}{RGB}{230, 159, 0}
\definecolor{wongGreen}{RGB}{0, 158, 115}
\definecolor{wongYellow}{RGB}{240, 228, 66}
\definecolor{wongBlue}{RGB}{0, 114, 178}
\definecolor{wongOrange}{RGB}{213, 94, 0}
\definecolor{wongPurple}{RGB}{204, 121, 167}
\definecolor{IBMPurple}{RGB}{120, 94, 240}
\definecolor{IBMMagenta}{RGB}{220, 38, 127}
$$

:::{.callout-note}

## Objectives

This chapter, as [Chapter -@sec-lp], uses @jorda2005estimation Local Projection framework to measure how sensitive agricultural output is to exogenous changes in the weather. The differences lies in the fact that the weather variables are included with first order **and** second order term in the equations.

:::

```{r}
library(tidyverse)
library(fastDummies)
library(lmtest)
```

The data can be loaded (see [Chapter -@sec-merge])
```{r}
load("../data/output/df_lp.rda")
df
```


Some packages are needed, make sure that they are installed.

```{r}
# install.packages("fastDummies")
# install.packages("imputeTS")
# install.packages("ggh4x")
# install.packages("mFilter")
# install.packages("pbapply")
# install.packages("latex2exp")
# install.packages("sandwich")
```


We load some useful functions:
```{r}
# Functions useful to shape the data for local projections
source("../weatherperu/R/format_data.R")

# Load function in utils
source("../weatherperu/R/utils.R")

# Load detrending functions
source("../weatherperu/R/detrending.R")

# Estimation functions
source("../weatherperu/R/estimations.R")
```


## Linear Local Projections {#sec-lp-quadratic-linear}

In this section, we focus on estimating the Local Projections [@jorda2005estimation] to quantify the impact of weather on agricultural production. We utilize panel data, similar to the approach used in the study by @acevedo2020effects, and independently estimate models for each specific crop.

For a particular crop denoted as $c$, the model can be expressed as follows:
$$
\begin{aligned}
\underbrace{y_{c,i,{\color{wongGold}t+h}}}_{\text{Production}} = & \underbrace{\alpha_{c,i,h}}_{\text{reg. fixed effect}} + {\color{wongOrange}\beta_{c,{\color{wongGold}h}}^{{\color{wongPurple}T}}} {\color{wongPurple}{T_{i,{\color{wongGold}t}}}} +
{\color{wongOrange}\beta_{c,{\color{wongGold}h}}^{{\color{wongPurple}T^2}}} {\color{wongPurple}{T^2_{i,{\color{wongGold}t}}}} +
{\color{wongOrange}\beta_{c,{\color{wongGold}h}}^{{\color{wongPurple}P}}} {\color{wongPurple}P_{i,{\color{wongGold}t}}} +
{\color{wongOrange}\beta_{c,{\color{wongGold}h}}^{{\color{wongPurple}P^2}}} {\color{wongPurple}P^2_{i,{\color{wongGold}t}}}\\
        &+\delta_{c,i,h}\underbrace{X_{t}}_{\text{controls}}+\varepsilon_{c,i,t+h}
\end{aligned}
$$ {#eq-model-lp}

Here, $i$ represents the region, $t$ represents the time, and $h$ represents the horizon. The primary focus lies on estimating `r colorize("the coefficients", wongOrange)` associated with `r colorize("temperature", wongPurple)` and `r colorize("precipitation", wongPurple)` for different `r colorize("time horizons", wongGold)` $\color{wongGold}h=\{0,1,...,T_{c}\}$


The squared variables are added to the dataset.
```{r}
df <- 
  df |> 
  mutate(
    temp_max_dev_sq = temp_max_dev^2,
    precip_sum_dev_sq = precip_sum_dev^2
  )
```



### Estimation {#sec-lp-quadratic-estimation}

To loop over the different crops, we can utilize the `map()`{.R} function. This function enables us to apply the `estimate_linear_lp()`{.R} function to each crop iteratively, facilitating the estimation process.



```{r lp-lin-estim}
crops <- df$product_eng |> unique()
weather_variables <- c(
  "temp_max_dev", "precip_sum_dev",
  "temp_max_dev_sq", "precip_sum_dev_sq"
)
control_variables <- c("rer_hp", "r_hp", "pi", "ind_prod", "ONI", "price_int_inf")

resul_lp_quad <- map(
  crops, ~ estimate_linear_lp(
    df = df,
    horizons = 8,
    y_name = "y",
    group_name = "region_id",
    add_month_fe = FALSE,
    add_intercept = FALSE,
    crop_name = .,
    control_names = control_variables,
    weather_names = weather_variables,
    std = "Cluster",
    other_var_to_keep = "y_new"
  )
)
```


### Results


We can visualize the Impulse Response Functions (IRFs) by plotting the estimated coefficients associated with the weather variables. These coefficients represent the impact of weather on agricultural production and can provide valuable insights into the dynamics of the system. By plotting the IRFs, we can gain a better understanding of the relationship between weather variables and the response of agricultural production over time.

The data for the graphs:
```{r create-df-irfs-lp}
df_irfs_lp_quad <- 
  map(resul_lp_quad, "coefs") |> 
  list_rbind() |> 
  filter(name %in% weather_variables) |> 
  mutate(
    order = ifelse(str_detect(name, "_sq$"), 2, 1),
    name = str_remove(name, "_sq$")
  ) |> 
  pivot_wider(
    names_from = order, 
    values_from = c(value, std, std_shock, median_shock, q05_shock, q95_shock), 
    names_prefix = 'order_') |> 
  rename(d = std_shock_order_1) |> 
  mutate(
    ir = value_order_1 * d + value_order_2 * d^2,
    # IC 95%
    ir_lower_95 = (value_order_1 - qnorm(0.975) * std_order_1) * d + 
      (value_order_2 - qnorm(0.975) * std_order_2) * d^2,
    ir_upper_95 = (value_order_1 + qnorm(0.975) * std_order_1) * d +
      (value_order_2 + qnorm(0.975) * std_order_2) * d^2,
    # IC 68%
    ir_lower_68 = (value_order_1 - qnorm(0.84) * std_order_1) * d + 
      (value_order_2 - qnorm(0.84) * std_order_2) * d^2,
    ir_upper_68 = (value_order_1 + qnorm(0.84) * std_order_1) * d +
      (value_order_2 + qnorm(0.84) * std_order_2) * d^2
  ) |> 
  mutate(
    crop = factor(
      crop, 
      levels = c("Rice", "Dent corn", "Potato", "Cassava"),
      labels = c("Rice", "Maize", "Potato", "Cassava"))
  ) |> 
  mutate(
    name = factor(
      name,
      levels = c(
        "temp_max_dev",
        "precip_sum_dev"
      ),
      labels = c(
        "Temp. anomalies", 
        "Precip. anomalies"
      )
    )
  )
```

For the confidence intervals:
```{r create-df-irfs-lp-quad-ci}
df_irfs_lp_quad_ci <- 
  df_irfs_lp_quad |> 
  select(horizon, crop, name, matches("^(ir_lower)|^(ir_upper)", perl = TRUE)) |> 
  pivot_longer(
    cols = matches("^(ir_lower)|^(ir_upper)", perl = TRUE),
    names_pattern = "(.*)_(95|68)$",
    names_to = c(".value", "level")
  ) |> 
  mutate(level = str_c(level, "%"))
```



```{r}
#| fig-cap: Agricultural production response to a weather shock
#| label: fig-simple-projection
# Duration of the growing season
gs_duration_df <- tribble(
  ~crop, ~tc,
  "Rice", 4,
  "Maize", 5,
  "Potato", 6,
  "Cassava", 9
) |> 
  mutate(tc = tc / 3)
ggplot() +
  geom_ribbon(
    data = df_irfs_lp_quad_ci,
    mapping = aes(
      x = horizon,
      ymin = ir_lower, ymax = ir_upper, fill = level),
    alpha = .2
  ) +
  geom_line(
    data = df_irfs_lp_quad,
    mapping = aes(x = horizon, y = ir),
    colour = "#0072B2") +
  geom_hline(yintercept = 0, colour = "gray40") +
  geom_vline(
    data = gs_duration_df, 
    mapping = aes(xintercept = tc),
    colour = "#D55E00", linetype = "dashed") +
  ggh4x::facet_grid2(
    name~crop, 
    scales = "free_y", independent = "y", switch = "y", axes = "all") +
  scale_y_continuous(labels = scales::percent) +
  labs(x = "Horizon (quarters)", y = NULL) +
  scale_fill_manual(
    "C.I. level", 
    values = c("68%" = "gray10", "95%" = "gray60")
  ) +
  theme_paper() +
  theme(strip.placement = "outside")
```

