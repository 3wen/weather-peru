# Descriptive Statistics {#sec-desc-stat}

:::{.callout-note}

## Objectives

This chapter presents some descriptive statistics on the variables used in the article.

:::

```{r}
library(tidyverse)
```

The different ggplot2 themes can be loaded:
```{r}
source("../weatherperu/R/utils.R")
```


Let us load the data used in the local projections estimations.
```{r}
load("../data/output/df_lp.rda")
```

We also load the weather data:
```{r}
load("../data/output/weather/weather_regions_df.rda")
```


The map of Peru can be loaded (See [Section -@sec-peru-map] for more details on the map).
```{r, message=FALSE, warning=FALSE}
map_peru <- "../data/raw/shapefile_peru/departamentos/" |> 
  sf::st_read(quiet = TRUE)
map_peru <-
  rmapshaper::ms_simplify(input = as(map_peru, 'Spatial')) |>
  sf::st_as_sf()
```


## Dictionary of the Variables


| Variable name | Type | Description |
| :------------ | ---- | ----------- |
| `y_new` | numeric | Monthly Agricultural Production (tons) |
| `y_dev_pct` | numeric | Agricultural Production (percent deviation from monthly regional values) |
| `product` | character | Name of the crop (in Spanish) |
| `product_eng` | character | Name of the Product (in English) |
| `region_id` | integer | Region numerical ID |
| `region` | character | Name of the region |
| `year` | numeric | Year (YYYY) |
| `month` | numeric | Month (MM) |
| `date` | Date | Date (YYYY-MM-DD) |
| `ln_prices` | numeric | Product price (log) |
| `ln_produc` | numeric | Production (log of tons) |
| `Value_prod` | numeric | Production (tons) |
| `surf_m` | numeric | Planted Surface during the current month (hectares) |
| `Value_surfR` | numeric | Harvested Surface (hectares) |
| `Value_prices` | numeric | Unit Price (Pesos) |
| `campaign` | numeric | ID of the planting campaing (starting in August) |
| `campaign_plain` | character | Years of the planting campaing (starting in August) |
| `month_campaign` | numeric | Month of the planting campaing (August = 1) |
| `surf_lag_calend` | numeric | Planted Surface laggued by the growth duration computed from the caledars (hectares) |
| `perc_product` | numeric | Share of the annual production harvested at month m |
| `perc_product_mean` | numeric | Average share of the annual production harvested at month m |
| `diff_plant_harv` | numeric | Difference between planted and harvested surfaces during month m |
| `exposition` | numeric | Cumulative difference between planted and harvested surfaces |
| `exposition_trend` | numeric | Trend of the exposition using HP filter |
| `exposition_detrended` | numeric | Difference between the exposition and its trend |
| `exposition_norm` | numeric | Normalisation of the detrended exposition |
| `temp_min` | numeric | Monthly average of daily min temperature |
| `temp_max` | numeric | Monthly average of daily max temperature |
| `temp_mean` | numeric | Monthly average of daily mean temperature |
| `precip_sum`, `precip_piscop_sum` | numeric | Monthly sum of daily rainfall |
| `perc_gamma_precip`, `perc_gamma_precip_piscop` | numeric | Percentile of the monthly precipitation (Estimated Gamma Distribution) |
| `temp_min_dev` | numeric | Deviation of monthly min temperatures (`temp_min`) from climate normals (1986 -- 2015) |
| `temp_max_dev` | numeric | Deviation of monthly max temperatures (`temp_max`) from climate normals (1986 -- 2015) |
| `temp_mean_dev` | numeric | Deviation of monthly mean temperatures (`temp_mean`) from climate normals (1986 -- 2015) |
| `precip_sum_dev`, `precip_piscop_sum_dev` | numeric | Deviation of monthly total rainfall (`precip_sum`) from climate normals (1986 -- 2015) |
| `spi_1`, `spi_piscop_1` | numeric | SPI Drought Index, Scale = 1 |
| `spi_3`, `spi_piscop_3` | numeric | SPI Drought Index, Scale = 3 |
| `spi_6`, `spi_piscop_6` | numeric | SPI Drought Index, Scale = 6 |
| `spi_12`, `spi_piscop_12` | numeric | SPI Drought Index, Scale = 12 |
| `spei_1`, `spei_piscop_1` | numeric | SPEI Drought Index, Scale = 1 |
| `spei_3`, `spei_piscop_3` | numeric | SPEI Drought Index, Scale = 3 |
| `spei_6`, `spei_piscop_6` | numeric | SPEI Drought Index, Scale = 6 |
| `spei_12`, `spei_piscop_12` | numeric | SPEI Drought Index, Scale = 12 |
| `ONI` | numeric | Oceanic Niño Index |
| `elnino` | numeric | `1` if El-Niño event, `0` otherwise |
| `lanina` | numeric | `1` if La-Niña event, `0` otherwise |
| `State` | numeric | State: `"La Niña"`{.R}, `"Normal"`{.R}, or  `"El Niño"`{.R} |
| `enso_start` | numeric | `1` if current date corresponds to the begining of one of the three states, `0` otherwise |
| `enso_end` | numeric | `1` if current date corresponds to the end of one of the three states, `0` otherwise  |
| `temp_min_dev_ENSO` | numeric | Deviation of Min. Temperature from ENSO Normals |
| `temp_max_dev_ENSO` | numeric | Deviation of Max. Temperature from ENSO Normals |
| `temp_mean_dev_ENSO`  | numeric | Deviation of Mean Temperature from ENSO Normals |
| `precip_sum_dev_ENSO`, `precip_piscop_sum_dev_ENSO` | numeric | Deviation of Total Rainfall from ENSO Normals |
| `gdp` | numeric | GDP in percentage point, percentage deviation from trend, detrended and seasonally adjusted |
| `ya` | numeric | Agricultural GDP in percentage point, percentage deviation from trend, detrended and seasonally adjusted |
| `rer_hp` | numeric | Real exchange rate, detrended using HP filter |
| `rer_dt_sa` | numeric | Real exchange rate, detrended and seasonally adjusted |
| `r` | numeric | Interest rate, in percentage point, detrended |
| `r_hp` | numeric | Interest rate, in percentage point, detrended using HP filter |
| `pi` | numeric | Inflation rate, in percentage point |
| `pia` | numeric | Food inflation rate, in percentage point, seasonally adjusted |
| `ind_prod` | numeric | Manufacturing Production, in percentage point, percentage deviation from trend, detrended and seasonally adjusted |
| `price_int` | numeric | International commodity prices |
| `price_int_inf` | numeric | Growth rate of international commodity prices |
| `share_sierra` | numeric | Share of highlands |
| `share_selva` | numeric | Share of forest |
| `share_costa` | numeric | Share of coast |


: Variables in the `df` dataset stored in `"../data/output/df_lp.rda"`{.R} file {#tbl-desc-variables-df}



## Crops

We focus on the following crops:
```{r}
crops <- c("Rice", "Dent corn", "Potato", "Cassava")
```

@tbl-stats-prod presents some descriptive statistics about the monthly production of the selected crops, averaged over the region


```{r}
#| tbl-cap: "Descriptive statistics for monthly production (in tons) per type of crop"
#| label: tbl-stats-prod
#| code-fold: true
df |> 
  group_by(product_eng) |> 
  summarise(
    Mean = mean(y_new, na.rm = TRUE),
    Median = median(y_new, na.rm = TRUE),
    `Standard Deviation` = sd(y_new, na.rm = TRUE),
    Min = min(y_new, na.rm = TRUE),
    Max = max(y_new, na.rm = TRUE),
    `No. regions` = length(unique(region)),
    `No. obs.` = n()
  ) |> 
  rename(Culture = product_eng) |> 
  knitr::kable(
    booktabs = TRUE, 
    format.args = list(big.mark = ",")
  )
```



### National Production

@fig-prod-nat provides a visual representation of the national production of each time of crop over our time sample, which is the sum of the monthly regional production.

```{r}
#| fig-cap: National monthly crop production for selected cultures (in tons)
#| label: fig-prod-nat
#| code-fold: true
ggplot(
  data = df |> 
    group_by(product_eng, date) |> 
    summarise(
      nat_prod = sum(y_new),
      .groups = "drop"
    ) |> 
    mutate(
      product_eng = factor(
        product_eng, 
        levels = c("Rice", "Dent corn", "Potato", "Cassava"),
        labels = c("Rice", "Maize", "Potato", "Cassava"),
      )
    )
) +
  geom_line(
    mapping = aes(x = date, y = nat_prod),
    colour = "#1f78b4",
    linewidth = 1
  ) +
  facet_wrap(~product_eng, scales = "free_y", ncol = 2) +
  labs(x = NULL, y=  "Aggregate Production (tons)") +
  scale_y_continuous(labels = scales::number_format(big.mark = ",")) +
  theme_paper()
```


### National Production by Month and Type of Region


In @fig-prod-regional, we document the regional differences and the seasonality by averaging the monthly production over the different types of natural regions.

```{r}
#| fig-cap: Crop production by months and natural regions (in tons)
#| label: fig-prod-regional
#| code-fold: true
ggplot(
  data = df |> 
    group_by(product_eng, year, month) |> 
    # Average each month at the national level
    summarise(
      prod_nat_costa = sum(y_new * share_costa),
      prod_nat_selva = sum(y_new * share_selva),
      prod_nat_sierra = sum(y_new * share_sierra),
      .groups = "drop"
    ) |> 
    pivot_longer(
      cols = c(prod_nat_costa, prod_nat_selva, prod_nat_sierra),
      names_to = "geo",
      values_to = "monthly_prod_geo"
    ) |> 
    # Average in each region type for each calendar month
    group_by(product_eng, month, geo) |> 
    summarise(
      monthly_prod_geo = mean(monthly_prod_geo),
      .groups = "drop"
    ) |> 
    mutate(
      product_eng = factor(
        product_eng, 
        levels = c("Rice", "Dent corn", "Potato", "Cassava"),
        labels = c("Rice", "Maize", "Potato", "Cassava"),
      ),
      geo = factor(
        geo,
        levels = c("prod_nat_costa", "prod_nat_selva", "prod_nat_sierra"),
        labels = c("Coast", "Forest", "Highlands")
      )
    ),
  mapping = aes(
    x = month, y = monthly_prod_geo, 
    colour = geo, linetype = geo
  )
) +
  geom_line(
    linewidth = 1
  ) +
  facet_wrap(~product_eng, scales = "free") +
  labs(x = NULL, y = "Average Production (tons)") +
  scale_colour_manual(
    NULL,
    values = c(
      "Coast" = "#56B4E9", "Forest" = "#009E73", "Highlands" = "#E69F00"
    )
  ) +
  scale_linetype_discrete(NULL) +
  scale_x_continuous(breaks= 1:12, labels = month.abb) +
  scale_y_continuous(labels = scales::number_format(big.mark = ",")) +
  theme_paper()
```

### Share of agricultural land


Let us load the share of agricultural area in the cell, for each cell of the grid (see [Section -@sec-weather-land-use] for more details on that specific grid):
```{r}
load("../data/output/land/map_peru_grid_agri.rda")
```

@fig-map-agri-land-grid presents the production distribution for each type of crop.

```{r}
#| fig-cap: Regional distribution of crop production by administrative regions
#| label: fig-map-agri-land-grid
#| code-fold: true
ggplot() +
  geom_sf(
    data = map_peru_grid_agri |> 
      mutate(share_cropland = percent_cropland / 100), 
    mapping = aes(fill = share_cropland),
    colour = "grey"
  ) +
  geom_sf(data = map_peru, fill = NA) +
  scale_fill_gradient2(
    "Share of\nagricultural\nland", 
    low = "white", high = "#61C250",
    labels = scales::label_percent()
  ) +
  theme_map_paper()
```


### Regions Used in the Local Projection Analysis

We need to know, for each region of the map, whether it is included or not in the analysis.

The number of regions used in the analysis for each crop:
```{r}
df |> 
  group_by(product_eng) |> 
  summarise(nb_regions = length(unique(region_id)))
```

We can also look at the spatial distribution of these regions. Let us create a map that shows whether each region is included/excludes. On the same map, we would like to have an idea of the relative share in the total production over the period each region represents, for each crop.
```{r}
df_plot_map_regions <- 
  map_peru |> 
  left_join(
    df |> 
      select(product_eng, region) |> unique() |> 
      mutate(used = TRUE) |> 
      pivot_wider(names_from = product_eng, values_from = used),
    by = c("DEPARTAMEN" = "region")
  )
```

<!-- @fig-map-local-projection-included-dep shows for each region, whether it is included (green) or not (grey). -->
<!-- ```{r} -->
<!-- #| fig-cap: Geographic Distribution of Departments Included in the Analysis -->
<!-- #| label: fig-map-local-projection-included-dep -->
<!-- #| code-fold: true -->
<!-- ggplot( -->
<!--   data = df_plot_map_regions |>  -->
<!--     pivot_longer(cols = !!crops, values_to = "included") |>  -->
<!--     mutate( -->
<!--       included = replace_na(included, FALSE), -->
<!--       included = factor( -->
<!--         included, levels = c(TRUE, FALSE), -->
<!--         labels = c("Yes", "No") -->
<!--       ) -->
<!--     ) -->
<!-- ) + -->
<!--   geom_sf(mapping = aes(fill = included)) + -->
<!--   facet_wrap(~name) + -->
<!--   theme_paper() + -->
<!--   scale_fill_manual( -->
<!--     NULL, -->
<!--     values = c("Yes" = "#009E73", "No" = "#949698"), -->
<!--     labels = c("Yes" = "Region included", "No" = "Region discarded")) + -->
<!--   theme( -->
<!--     axis.title = element_blank(), -->
<!--     axis.text = element_blank(), -->
<!--     axis.ticks = element_blank(), -->
<!--     axis.line = element_blank() -->
<!--   ) -->
<!-- ``` -->


Let us load the dataset obtained at the end of [Chapter -@sec-merge]. 
```{r}
load("../data/output/dataset_2001_2015.rda")
```

We compute the crop-specific share that each region represents in the annual production.
```{r}
prod_reg <- 
  data_total |> 
  group_by(region, product_eng) |> 
  summarise(
    total_production = sum(Value_prod, na.rm = T),
    .groups = "drop"
  ) |> 
  unique() |> 
  group_by(product_eng) |> 
  mutate(total_culture = sum(total_production)) |> 
  ungroup() |> 
  mutate(share = total_production / total_culture)
prod_reg
```

We prepare a map dataset for each crop:
```{r}
map_production_regions <- NULL
for (i in 1:length(crops)) {
  culture <- as.character(crops[i])
  map_peru_tmp <- map_peru |> 
    left_join(
      prod_reg |> 
        filter(product_eng == !!culture), 
      by = c("DEPARTAMEN" = "region")
    ) |> 
    mutate(product_eng = !!culture)
  map_production_regions <- bind_rows(map_production_regions, map_peru_tmp)
}
```

<!-- @fig-prod-regional-map shows the production distribution for each type of crop. -->

<!-- ```{r} -->
<!-- #| fig-cap: Regional distribution of crop production by administrative regions -->
<!-- #| label: fig-prod-regional-map -->
<!-- #| code-fold: true -->
<!-- ggplot( -->
<!--   data = map_production_regions -->
<!-- ) + -->
<!--   geom_sf( -->
<!--     mapping = aes(fill = share, group = DEPARTAMEN) -->
<!--   ) + -->
<!--   scale_fill_gradient2( -->
<!--     "Share", low = "#FFC107", mid = "white", high = "#009E73", -->
<!--     labels = scales::percent_format() -->
<!--   ) + -->
<!--   facet_wrap(~product_eng) + -->
<!--   theme_map_paper() -->
<!-- ``` -->

Lastly, let us add information on inclusion/exclusion from the analysis:

```{r}
included_regions <- 
  df_plot_map_regions |> 
  pivot_longer(cols = !!crops, values_to = "included") |> 
  as_tibble() |> 
  select(IDDPTO, name, included) |> 
  mutate(included = replace_na(included, FALSE)) |> 
  rename(product_eng = name)
```

@fig-map-comparison-discarded-nat-prod allows to visualize the relative importance of the discarded series in relation to the overall national agricultural production.

```{r}
#| fig-cap: Comparison of Discarded Series with National Production
#| label: fig-map-comparison-discarded-nat-prod
#| code-fold: true
library(ggpattern)
p_regions_use_production <- 
  ggplot(
    data = map_production_regions |> 
      left_join(included_regions, by = c("IDDPTO", "product_eng")) |> 
      mutate(
        included = factor(
          included, 
          levels = c(TRUE, FALSE), 
          labels = c("Yes", "No")
        )
      ) |> 
      mutate(
        product_eng = factor(
          product_eng,
          levels = c("Cassava", "Dent corn", "Potato", "Rice"),
          labels = c("Cassava", "Maize", "Potato", "Rice")
        )
      )
  ) +
  geom_sf_pattern(
    mapping = aes(
      pattern = included,
      pattern_type = included, 
      fill = share
    ),
    pattern_fill = "white",
    pattern_alpha = .8
  ) +
  # scale_pattern_type_discrete("Included", values = c("Yes" = "none", "No" = "stripe")) +
  scale_pattern_manual("Included", values = c("No" = "stripe", "Yes" = "none")) +
  scale_pattern_type_manual("Included", values=c(NA, NA)) +
  scale_fill_gradient2(
    "Share", low = "#FFC107", mid = "white", high = "#009E73",
    labels = scales::percent_format()
  ) +
  facet_wrap(~product_eng) +
  theme_map_paper()
p_regions_use_production
```

## Natural regions

Let us now focus on the natural regions: Coast, Forest, Highlands.

First, we load the map (see [Section -@sec-other-natural-regions]):
```{r}
map_regiones_naturales <-  sf::st_read(
  str_c(
    "../data/raw/shapefile_peru/regiones_naturales/",
    "region natural_geogpsperu_JuanPabloSuyoPomalia.geojson"
  ),
  quiet = TRUE
)
```

We prepare a map:
```{r}
map_regiones_naturales <-
  rmapshaper::ms_simplify(input = as(map_regiones_naturales, 'Spatial')) |> 
  sf::st_as_sf() |> 
  mutate(
    Natural_region = case_when(
      Nm_RegNat == "Costa" ~ "Coast",
      Nm_RegNat == "Selva" ~ "Forest",
      Nm_RegNat == "Sierra" ~ "Highlands"
    )
  )
```

We use the following colours for each type of region:
```{r}
cols <- c("Coast" = "#56B4E9", "Forest" = "#009E73", "Highlands" = "#E69F00")
```

@fig-map-nat-regions shows these regions, and adds the grid used with the weather data from [Chapter -@sec-weather-data] as well as the regional boundaries used in the analysis.

```{r}
#| fig-cap: Natural Regions in Peru
#| label: fig-map-nat-regions
#| code-fold: true
ggplot(data = map_regiones_naturales) +
  geom_sf(mapping = aes(fill = Natural_region), lwd = 0) +
  scale_fill_manual(values = cols, name = "Natural region") +
  geom_sf(data = map_peru, fill = NA) +
  geom_sf(data = map_peru_grid_agri, fill = NA, lwd = 0.25) +
  theme_map_paper()
```

## Correlations Between Agricultural Production and the Weather

Let us compute the correlation between the agricultural production and our various weather variables. Recall from [Chapter -@sec-merge] that the agricultural production is defined as the percent deviation from the monthly trend.

The name of the weather variables:
```{r}
name_weather_variables <- 
  weather_regions_df |> 
  select(where(is.numeric)) |> 
  select(-year, -month) |> 
  colnames()
name_weather_variables
```

```{r}
#| tbl-cap: Correlations between the weather and the agricultural production
#| label: tbl-correlations-agri-weather
#| code-fold: true
df |>
  select(product_eng, y_new, !!!syms(name_weather_variables)) |>
  na.omit() |>
  nest(.by = product_eng) |> 
  mutate(
    correlation = map(
      data, ~cor(.x) |> 
        data.frame() |> 
        as_tibble(rownames = "var")
    )
  ) |> 
  select(-data) |> 
  unnest(correlation) |> 
  select(Crop = product_eng, Variable = var, y_new) |> 
  pivot_wider(names_from = Crop, values_from = y_new) |> 
  mutate(across(where(is.numeric), ~round(.x, 2))) |> 
  knitr::kable()
```


## Summary Statistics for the Local Projection Data

The number of observation in each region and crops (ordered by decreasing values): 
```{r}
df |> 
  count(product_eng, region_id) |> 
  arrange(n)
```


Let us plot the agricultural production series for each crop in each region.

:::{.panel-tabset}

### Production in level

```{r define-plots_crops_lp}
#| code-fold: true
plots_crops_lp <- vector(mode = "list", length = length(crops))
for (i_crop in 1:length(crops)) {
  current_crop <- crops[i_crop]
  # The series in each region for the current crop
  p_crop_lp <- 
    ggplot(
    data = df |> filter(product_eng == !!current_crop),
    mapping = aes(x = date, y = y_new)
  ) +
    geom_line() +
    facet_wrap(~region, scales = "free_y") +
    labs(
      title = current_crop, x = NULL,
      y = "Production (tons)") +
    theme_paper()
  plots_crops_lp[[i_crop]] <- p_crop_lp
}
names(plots_crops_lp) <- crops
```

::::{.panel-tabset}

#### Rice
```{r}
#| fig-cap: Regional Production of Rice (tons)
#| label: fig-ag-prod-data-rice-lp
print(plots_crops_lp[["Rice"]])
```

#### Maize (Dent corn)

```{r}
#| fig-cap: Regional Production of Maize (tons)
#| label: fig-ag-prod-data-maize-lp
print(plots_crops_lp[["Dent corn"]])
```

#### Potato

```{r}
#| fig-cap: Regional Production of Potato (tons)
#| label: fig-ag-prod-data-potato-lp
print(plots_crops_lp[["Potato"]])
```

#### Cassava

```{r}
#| fig-cap: Regional Production of Cassava (tons)
#| label: fig-ag-prod-data-cassava-lp
print(plots_crops_lp[["Cassava"]])
```

::::


### Production in percentage deviation

```{r define-plots_crops_lp-2}
#| code-fold: true
plots_crops_lp <- vector(mode = "list", length = length(crops))
for (i_crop in 1:length(crops)) {
  current_crop <- crops[i_crop]
  # The series in each region for the current crop
  p_crop_lp <- 
    ggplot(
    data = df |> filter(product_eng == !!current_crop),
    mapping = aes(x = date, y = y_dev_pct)
  ) +
    geom_line() +
    facet_wrap(~region, scales = "free_y") +
    labs(
      title = current_crop, x = NULL,
      y = "Percent deviation from regional monthly trend") +
    theme_paper()
  plots_crops_lp[[i_crop]] <- p_crop_lp
}
names(plots_crops_lp) <- crops
```

::::{.panel-tabset}

#### Rice
```{r}
#| fig-cap: Regional Production of Rice (Deviation from Monthly Trend)
#| label: fig-ag-prod-data-rice-lp-pct
print(plots_crops_lp[["Rice"]])
```

#### Maize (Dent corn)

```{r}
#| fig-cap: Regional Production of Maize (Deviation from Monthly Trend)
#| label: fig-ag-prod-data-maize-lp-pct
print(plots_crops_lp[["Dent corn"]])
```

#### Potato

```{r}
#| fig-cap: Regional Production of Potato (Deviation from Monthly Trend)
#| label: fig-ag-prod-data-potato-lp-pct
print(plots_crops_lp[["Potato"]])
```

#### Cassava

```{r}
#| fig-cap: Regional Production of Cassava (Deviation from Monthly Trend)
#| label: fig-ag-prod-data-cassava-lp-pct
print(plots_crops_lp[["Cassava"]])
```

::::

:::






```{r, warning=FALSE, message=FALSE}
#| tbl-cap: Descriptive Statistics of the Data Used in the Local Projections
#| label: tbl-desc-stat-df-lp
#| code-fold: true
library(gtsummary)
df |>
  tbl_summary(
    include = c(
      "product_eng",
      # Production
      "y_new", "y_dev_pct",
      # Weather
      "temp_max", "precip_sum", "precip_piscop_sum",
      "temp_max_dev", "precip_sum_dev", "precip_piscop_sum_dev",
      # Control
      "rer_hp", "r_hp", "pi", "ind_prod", "ONI", "price_int_inf",
      # Type of region
      "share_costa", "share_selva", "share_sierra"
    ),
    by = product_eng,
    type = all_continuous() ~ "continuous2",
    statistic = list(
      all_continuous() ~ c("{mean} ({sd})", "{median} ({p25}, {p75})"),
      all_categorical() ~ "{n} ({p}%)"),
    digits = list(
      all_continuous() ~ 2,
      all_categorical() ~ 0
    )
  ) |> 
  add_overall(col_label = "Whole sample") |> 
  modify_header(label ~ "**Variable**") |> 
  modify_spanning_header(
    c("stat_1", "stat_2", "stat_3", "stat_4") ~ "**Crop**"
  ) |> 
  add_stat_label(
    label = list(
      all_continuous() ~ c("Mean (SD)", "Median (IQR)"),
      all_categorical() ~ "n (%)"
    )
  )
```


## Growing Season Duration

Let us have a look at the growing season duration for each crop.

We need these additional two packages:
```{r}
library(readxl)
```

We load the dataset with agricultural data (see [Chapter -@sec-ag-data]).
```{r load-data_S_TOTAL}
load("../data/output/minagri/data_S_TOTAL.rda")
load("../data/output/minagri/data_SR_TOTAL.rda")
load("../data/output/df_lp.rda")
```

Let us focus on the regions kept in the final data for each crop.
```{r defin-elist_of_regions}
list_of_regions <- 
  df |> 
  select(product, region) |> 
  unique() |> 
  mutate(keep_data = 1)
```


```{r define-regions-data_S_TOTAL}
data_S_TOTAL <- data_S_TOTAL |> 
  mutate(
    region = str_replace_all(region, "á", "a"),
    region = str_replace_all(region, "í", "i"),
    region = str_replace_all(region, "é", "e"),
    region = str_replace_all(region, "ó", "o"),
    region = str_replace_all(region, "ú", "u"),
    region = str_replace_all(region, "ñ", "n")
  )


data_SR_TOTAL <- data_SR_TOTAL |> 
  mutate(
    region = str_replace_all(region, "á", "a"),
    region = str_replace_all(region, "í", "i"),
    region = str_replace_all(region, "é", "e"),
    region = str_replace_all(region, "ó", "o"),
    region = str_replace_all(region, "ú", "u"),
    region = str_replace_all(region, "ñ", "n")
  )
```


```{r}
harv_cum <- data_SR_TOTAL |> 
  select(-date) |> 
  mutate(month = str_c("month", month)) |> 
  pivot_wider(names_from = month, values_from = Value_surfR) |> 
  mutate(
    cum_sum1  = month1, 
    cum_sum2  = month2 + cum_sum1, 
    cum_sum3  = month3 + cum_sum2, 
    cum_sum4  = month4 + cum_sum3, 
    cum_sum5  = month5 + cum_sum4, 
    cum_sum6  = month6 + cum_sum5, 
    cum_sum7  = month7 + cum_sum6, 
    cum_sum8  = month8 + cum_sum7, 
    cum_sum9  = month9 + cum_sum8, 
    cum_sum10 = month10 + cum_sum9, 
    cum_sum11 = month11 + cum_sum10, 
    cum_sum12 = month12 + cum_sum11
  ) |> 
  mutate(
    perc_cum1   = cum_sum1/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum2   = cum_sum2/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum3   = cum_sum3/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum4   = cum_sum4/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum5   = cum_sum5/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum6   = cum_sum6/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum7   = cum_sum7/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum8   = cum_sum8/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum9   = cum_sum9/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum10  = cum_sum10/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum11  = cum_sum11/ifelse(cum_sum12 == 0, 1, cum_sum12),
    perc_cum12  = cum_sum12/ifelse(cum_sum12 == 0, 1, cum_sum12)
  ) |>  
  select(
    product, region, year, perc_cum1, perc_cum2, perc_cum3, perc_cum4,
    perc_cum5, perc_cum6, perc_cum7, perc_cum8, perc_cum9, perc_cum10,
    perc_cum11, perc_cum12
  ) |> 
  pivot_longer(
    cols = c(
      perc_cum1, perc_cum2, perc_cum3, perc_cum4, perc_cum5, perc_cum6,
      perc_cum7, perc_cum8, perc_cum9, perc_cum10, perc_cum11, perc_cum12
    ),
    names_to = "month"
  ) |> 
  rename(perc_cum_harv_obs = value) |> 
  mutate(perc_cum_harv_obs = perc_cum_harv_obs*100) |> 
  mutate(
    month = case_when(
      month == "perc_cum1"  ~ 1, 
      month == "perc_cum2"  ~ 2, 
      month == "perc_cum3"  ~ 3, 
      month == "perc_cum4"  ~ 4, 
      month == "perc_cum5"  ~ 5, 
      month == "perc_cum6"  ~ 6, 
      month == "perc_cum7"  ~ 7, 
      month == "perc_cum8"  ~ 8, 
      month == "perc_cum9"  ~ 9, 
      month == "perc_cum10" ~ 10, 
      month == "perc_cum11" ~ 11, 
      month == "perc_cum12" ~ 12, 
    )
  ) |> 
  mutate(
    first = ifelse(perc_cum_harv_obs == 100, 1, 0),
    first = ifelse(first == 1 & lag(first) == 1, -1, first),
    perc_cum_harv_obs_first100 = ifelse(first == -1,0,perc_cum_harv_obs)
  ) |> 
  select(-first)
```

Selecting the total value (December) as an additional month:
```{r define-temp}
temp <- data_S_TOTAL |> 
  select(
    region, product, campaign_plain, month_campaign, Value_surf, campaign
  ) |>
  filter(month_campaign == 12) |> 
  mutate(month_campaign = 13) |> 
  rename(surf_m = Value_surf)
```


```{r define-plan_perc}
plan_perc <- data_S_TOTAL |> 
  select(
    region, product, campaign_plain, month_campaign, surf_m, campaign
  ) |> 
  rbind(temp) %>%
  .[with(., order(region, product, campaign, month_campaign) ), ] |> 
  select(-campaign) |> 
  mutate(month_campaign = str_c("cum_sum", month_campaign)) |> 
  unique() |> 
  filter(! product == "TOTAL") |> 
  pivot_wider(names_from = month_campaign, values_from = surf_m) |> 
  relocate(
    region, product, campaign_plain, cum_sum1, cum_sum2, cum_sum3,
    cum_sum4, cum_sum5, cum_sum6, cum_sum7, cum_sum8,
    cum_sum9, cum_sum10, cum_sum11, cum_sum12, cum_sum13
  ) |> 
  rename(total = cum_sum13) |> 
  mutate(
    perc_cum1  = cum_sum1/total*100,
    perc_cum2  = cum_sum2/total*100,
    perc_cum3  = cum_sum3/total*100,
    perc_cum4  = cum_sum4/total*100,
    perc_cum5  = cum_sum5/total*100,
    perc_cum6  = cum_sum6/total*100,
    perc_cum7  = cum_sum7/total*100,
    perc_cum8  = cum_sum8/total*100,
    perc_cum9  = cum_sum9/total*100,
    perc_cum10 = cum_sum10/total*100,
    perc_cum11 = cum_sum11/total*100, 
    perc_cum12 = cum_sum12/total*100
    ) |> 
  select(
    product, region, campaign_plain, perc_cum1, perc_cum2, perc_cum3,
    perc_cum4, perc_cum5, perc_cum6, perc_cum7, perc_cum8, perc_cum9, 
    perc_cum10, perc_cum11, perc_cum12
  ) |> 
  pivot_longer(
    cols = c(
      perc_cum1, perc_cum2, perc_cum3, perc_cum4, perc_cum5, perc_cum6, 
      perc_cum7, perc_cum8, perc_cum9, perc_cum10, perc_cum11, perc_cum12
    ), 
    names_to = "month_campaign"
  ) |> 
  rename(perc_plan_obs = value) |> 
  mutate(perc_plan_obs = perc_plan_obs) |> 
  mutate(
    month_campaign = case_when(
      month_campaign == "perc_cum1"  ~ 1,
      month_campaign == "perc_cum2"  ~ 2,
      month_campaign == "perc_cum3"  ~ 3,
      month_campaign == "perc_cum4"  ~ 4,
      month_campaign == "perc_cum5"  ~ 5,
      month_campaign == "perc_cum6"  ~ 6,
      month_campaign == "perc_cum7"  ~ 7,
      month_campaign == "perc_cum8"  ~ 8,
      month_campaign == "perc_cum9"  ~ 9,
      month_campaign == "perc_cum10" ~ 10,
      month_campaign == "perc_cum11" ~ 11,
      month_campaign == "perc_cum12" ~ 12,
    )
  )
```


```{r define-plan_perc_cum}
plan_perc_cum <- data_S_TOTAL |> 
  select(
    region, product, campaign_plain, month_campaign, Value_surf, campaign
  ) %>%
  .[with(., order(region, product, campaign, month_campaign) ), ] |> 
  select(-campaign) |> 
  mutate(month_campaign = str_c("cum_sum", month_campaign)) |> 
  unique() |> 
  filter(! product == "TOTAL") |> 
  pivot_wider(
    names_from = month_campaign, values_from = Value_surf
  ) |> 
  relocate(
    region, product, campaign_plain, 
    cum_sum1, cum_sum2, cum_sum3, cum_sum4, cum_sum5, cum_sum6, 
    cum_sum7, cum_sum8, cum_sum9, cum_sum10, cum_sum11, cum_sum12
  ) |> 
  mutate(
    perc_cum1   = cum_sum1/cum_sum12, 
    perc_cum2   = cum_sum2/cum_sum12, 
    perc_cum3   = cum_sum3/cum_sum12, 
    perc_cum4   = cum_sum4/cum_sum12,
    perc_cum5   = cum_sum5/cum_sum12, 
    perc_cum6   = cum_sum6/cum_sum12, 
    perc_cum7   = cum_sum7/cum_sum12, 
    perc_cum8   = cum_sum8/cum_sum12, 
    perc_cum9   = cum_sum9/cum_sum12, 
    perc_cum10  = cum_sum10/cum_sum12, 
    perc_cum11  = cum_sum11/cum_sum12, 
    perc_cum12  = cum_sum12/cum_sum12
  ) |> 
  select(
    product, region, campaign_plain, 
    perc_cum1, perc_cum2, perc_cum3, perc_cum4, perc_cum5, perc_cum6, 
    perc_cum7, perc_cum8, perc_cum9, perc_cum10, perc_cum11, perc_cum12
  ) |> 
  pivot_longer(
    cols = c(
      perc_cum1, perc_cum2, perc_cum3, perc_cum4, perc_cum5, perc_cum6, 
      perc_cum7, perc_cum8, perc_cum9, perc_cum10, perc_cum11, perc_cum12
    ), 
    names_to = "month_campaign"
  ) |> 
  rename(perc_cum_plan_obs = value) |> 
  mutate(perc_cum_plan_obs = perc_cum_plan_obs*100) |> 
  mutate(
    month_campaign = case_when(
      month_campaign == "perc_cum1"  ~ 1, 
      month_campaign == "perc_cum2"  ~ 2, 
      month_campaign == "perc_cum3"  ~ 3, 
      month_campaign == "perc_cum4"  ~ 4, 
      month_campaign == "perc_cum5"  ~ 5, 
      month_campaign == "perc_cum6"  ~ 6, 
      month_campaign == "perc_cum7"  ~ 7, 
      month_campaign == "perc_cum8"  ~ 8, 
      month_campaign == "perc_cum9"  ~ 9, 
      month_campaign == "perc_cum10" ~ 10, 
      month_campaign == "perc_cum11" ~ 11, 
      month_campaign == "perc_cum12" ~ 12, 
    )
  )
```

We load the calendars (see [Chapter -@sec-ag-data]).

```{r load-calendar3}
load("../data/output/Calendario agricola/calendar3.rda")
load("../data/output/Calendario agricola/calendar4.rda")
calendar3 <- calendar3 |> 
  mutate(
    region = str_replace_all(region, "á", "a"),
    region = str_replace_all(region, "í", "i"),
    region = str_replace_all(region, "é", "e"),
    region = str_replace_all(region, "ó", "o"),
    region = str_replace_all(region, "ú", "u"),
    region = str_replace_all(region, "ñ", "n")
  )|> 
  mutate(
    region = toupper(region), 
    product = toupper(product)
  ) |> 
  rename("perc_cum_harv_calend" = "perc_cum_harv")

calendar4 <- calendar4 |> 
  mutate(
    region = str_replace_all(region, "á", "a"),
    region = str_replace_all(region, "í", "i"),
    region = str_replace_all(region, "é", "e"),
    region = str_replace_all(region, "ó", "o"),
    region = str_replace_all(region, "ú", "u"),
    region = str_replace_all(region, "ñ", "n")
  ) |> 
  mutate(
    region = toupper(region), 
    product = toupper(product)
  ) |> 
  rename("perc_cum_plan_calend" = "perc_cum_plan")
```

Now, we can determine the optimal growth duration from the data.
```{r defin-eoptimal_growth_duration}
optimal_growth_duration <- data_SR_TOTAL |> 
  mutate(
    region = toupper(region), 
    product = toupper(product)
  ) |>
  filter(product  %in% c("PAPA","MAÍZ AMARILLO DURO", "ARROZ CÁSCARA",  "YUCA")) |> 
  full_join(list_of_regions) |> 
  filter(keep_data == 1) |> 
  select(-keep_data)
```

Looping over months:
```{r}
for (ii in 1:12) {
  optimal_growth_duration <- optimal_growth_duration |> 
    left_join(
      data_S_TOTAL |> 
        group_by(region, product) |> 
        select(region,product, date, surf_m) |> 
        mutate(!!as.name(paste("surf_lag", ii, sep="")) := lag(surf_m, ii)) |> 
        select(-surf_m) , 
      by = c("region", "product", "date")
    ) |> 
    mutate(
      !!as.name(paste("diff", ii, sep="")) := 
        !!as.name(paste("surf_lag", ii, sep="")) - Value_surfR
    )
}
rm(ii)
```

```{r define-v}
optimal_growth_duration_results <- optimal_growth_duration |> 
  unique() |> 
  group_by(region, product) |> 
  mutate(sum_totale = sum(Value_surfR, na.rm = T )) |> 
  ungroup() |> 
  filter(! sum_totale == 0) |> 
  select(- sum_totale) |> 
  filter(! year == 2001) |> 
  group_by(region, product) |> 
  transmute(
    nb_neg1 = sum(diff1 <0, na.rm = T),
    nb_neg2 = sum(diff2 <0, na.rm = T),
    nb_neg3 = sum(diff3 <0, na.rm = T),
    nb_neg4 = sum(diff4 <0, na.rm = T),
    nb_neg5 = sum(diff5 <0, na.rm = T),
    nb_neg6 = sum(diff6 <0, na.rm = T),
    nb_neg7 = sum(diff7 <0, na.rm = T),
    nb_neg8 = sum(diff8 <0, na.rm = T),
    diff1 = mean(abs(diff1), na.rm = T), 
    diff2 = mean(abs(diff2), na.rm = T), 
    diff3 = mean(abs(diff3), na.rm = T), 
    diff4 = mean(abs(diff4), na.rm = T), 
    diff5 = mean(abs(diff5), na.rm = T), 
    diff6 = mean(abs(diff6), na.rm = T), 
    diff7 = mean(abs(diff7), na.rm = T), 
    diff8 = mean(abs(diff8), na.rm = T), 
    diff9 = mean(abs(diff9), na.rm = T), 
    diff10 = mean(abs(diff10), na.rm = T), 
    diff11 = mean(abs(diff11), na.rm = T), 
    diff12 = mean(abs(diff12), na.rm = T)
  ) |> 
  unique() |> 
  mutate(
    min_lag = min(
      diff1,diff2,diff3, diff4, diff5, diff6, 
      diff7, diff8, diff9, diff10, diff11, diff12
    ), 
    max_neg_values = max(
      nb_neg1, nb_neg2, nb_neg3, nb_neg4, nb_neg5, nb_neg6, nb_neg7, nb_neg8
    )
  ) |> 
  ungroup() |> 
  filter(! is.nan(min_lag)) |> 
  mutate(
    best_lag = case_when(
      diff1 == min_lag ~ as.numeric(13), 
      diff2 == min_lag ~ as.numeric(14), 
      diff3 == min_lag ~ as.numeric(3), 
      diff4 == min_lag ~ as.numeric(4), 
      diff5 == min_lag ~ as.numeric(5), 
      diff6 == min_lag ~ as.numeric(6), 
      diff7 == min_lag ~ as.numeric(7), 
      diff8 == min_lag ~ as.numeric(8), 
      diff9 == min_lag ~ as.numeric(9), 
      diff10 == min_lag ~ as.numeric(10), 
      diff11 == min_lag ~ as.numeric(11), 
      diff12 == min_lag ~ as.numeric(12), 
    ),
  worse_neg_values = case_when(
    nb_neg1 == max_neg_values ~ as.numeric(1),
    nb_neg2 == max_neg_values ~ as.numeric(2), 
    nb_neg3 == max_neg_values ~ as.numeric(3),
    nb_neg4 == max_neg_values ~ as.numeric(4),
    nb_neg5 == max_neg_values ~ as.numeric(5), 
    nb_neg6 == max_neg_values ~ as.numeric(6), 
    nb_neg7 == max_neg_values ~ as.numeric(7), 
    nb_neg8 == max_neg_values ~ as.numeric(8)), 
  bad_result = ifelse(best_lag == worse_neg_values, 1,0)
  )
```

```{r define-summary_opt_growth_duration}
summary_opt_growth_duration <- optimal_growth_duration_results |> 
  filter(! best_lag == 1) |> 
  select(region, product, max_neg_values, best_lag) |> 
  group_by(product) |> 
  transmute(
    mean_best_lag = mean(best_lag),
    med_best_lag  = median(best_lag), 
    sd_best_lag   = sd(best_lag), 
    min_best_lag  = min(best_lag), 
    max_best_lag  = max(best_lag), 
    nb_regions    = n()
  ) |> 
  ungroup() |> 
  mutate(
    product_eng = case_when(
      product == "ARROZ CÁSCARA"      ~ "Rice",
      product == "MAÍZ AMARILLO DURO" ~ "Maize",
      product == "PAPA"               ~ "Potato", 
      product == "YUCA"               ~ "Cassava", 
      TRUE ~ "delete")
  ) |> 
  unique() |> 
  select(- product) |> 
  relocate(product_eng) |> 
  arrange(product_eng)
```


```{r}
#| tbl-cap: Calculated growing season duration.
#| label: tbl-growing-season-duration
knitr::kable(summary_opt_growth_duration, digits = 2)
```


